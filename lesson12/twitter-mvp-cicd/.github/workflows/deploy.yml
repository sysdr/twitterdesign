name: Blue-Green Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
        
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: Run backend tests
        working-directory: ./backend
        run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Build frontend
        working-directory: ./frontend
        run: |
          npm ci
          npm run build
          
      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npm run build

  deploy-blue:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Blue Environment
        run: |
          echo "Deploying to Blue environment..."
          docker-compose up -d frontend-blue backend-blue postgres-blue redis-blue
          
      - name: Health Check Blue
        run: |
          sleep 30
          curl -f http://localhost:5001/api/health || exit 1
          
      - name: Switch Traffic to Blue
        run: |
          echo "Switching traffic to Blue environment..."
          # Update load balancer configuration
          docker-compose restart nginx-lb

  deploy-green:
    needs: deploy-blue
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Deploy to Green Environment
        run: |
          echo "Preparing Green environment for next deployment..."
          docker-compose stop frontend-green backend-green
